from django.db import models
from comunitaria.models import Community, UserCommunity
import uuid


class GeneratedEnergy(models.Model):
    """
        Energy generated by a community. Reported by the SCB.
        Amount is the amount generated in kW.
        MAM address represents the address in MAM where message was
        published.
    """
    community = models.ForeignKey(Community, on_delete=models.CASCADE)
    time = models.DateTimeField()
    energy_amount = models.DecimalField(decimal_places=3, max_digits=20)
    mam_address = models.CharField(max_length=300)

    def __str__(self):
        return "%s - %s " % (self.community.nif, self.energy_amount)


class ConsumedEnergy(models.Model):
    """
        Consumes from neighbours or common places in a Community.
        Price is calculated when saving the consume in api.
    """
    community = models.ForeignKey(Community, on_delete=models.CASCADE)
    user = models.ForeignKey(UserCommunity, on_delete=models.SET_NULL,
                             blank=True, null=True)
    time = models.DateTimeField()
    energy_amount = models.DecimalField(decimal_places=4, max_digits=20)
    mam_address = models.CharField(max_length=300)
    price = models.DecimalField(default=0,decimal_places=4, max_digits=20,
                                blank=True)
    # Processed by invoicing command
    processed = models.BooleanField(default=False, blank=True)
    invoice = models.ForeignKey('EnergyInvoice',
                                on_delete=models.SET_NULL,
                                null=True,
                                blank=True)

    def __str__(self):
        return "%s - %s " % (self.user, self.energy_amount)


class EnergyTransaction(models.Model):
    """
        Energy transaction between two communities.
        This model will reflect the transactions of energy between two
        communities, this measure could come from other sensor metering
        the connection between both communities
    """
    time = models.DateTimeField(auto_now_add=True)
    concept = models.CharField(max_length=350)
    energy_amount = models.DecimalField(decimal_places=2, max_digits=20)
    producer_community = models.ForeignKey(Community,
                                           on_delete=models.CASCADE,
                                           related_name="produced_energy")
    consumer_community = models.ForeignKey(Community,
                                           on_delete=models.CASCADE,
                                           related_name="consumed_energy")
    price = models.DecimalField(default=0,decimal_places=2, max_digits=20,
                                blank=True)
    invoice = models.ForeignKey('EnergyInvoice',
                                on_delete=models.SET_NULL,
                                null=True,
                                blank=True)

    def __str__(self):
        return "%s - %s (%s)" % (self.producer_community.nif, self.date,
                                 self.energy_amount)


class EnergyInvoice(models.Model):
    """
        Invoice for consumed or transacted energy.
    """
    date = models.DateTimeField(auto_now_add=True)
    concept = models.CharField(max_length=350)

    # Total amount in EUR
    total = models.DecimalField(decimal_places=2, max_digits=20)
    payer = models.ForeignKey(UserCommunity, on_delete=models.SET_NULL,
                              blank=True, null=True)
    payment_req = models.CharField(max_length=600, blank=True,
                                   null=True, default="")
    apitoshi_payment_id = models.CharField(max_length=600, blank=True,
                                           null=True, default="")
    paid = models.BooleanField(default=False, blank=True)

    def __str__(self):
        return "%s - %s (%s)" % (self.concept, self.date,
                                 self.total)


class CommunityEnergyInfo(models.Model):
    """
        - Token is used for authentication when calling the API
        - energy price is per Watt/h (in EUR)
        - 'in' for consumptions inside community
        - 'ex' for selling to other communities
        - APItoshi key is the key for the community (or installation provider)
    """
    community = models.OneToOneField(Community, on_delete=models.CASCADE)
    apitoshi_apikey = models.CharField(max_length=350, blank=True,
                                       null=True, default="")
    invoice_self_consumption = models.BooleanField(default=False, blank=True)
    in_community_energy_price = models.DecimalField(decimal_places=2,
                                                    max_digits=20)
    ex_community_energy_price = models.DecimalField(decimal_places=2,
                                                    max_digits=20)
    token = models.UUIDField(default=uuid.uuid4)

    def __str__(self):
        return "%s" % (self.community.nif)
